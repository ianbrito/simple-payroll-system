// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: departments.sql

package db

import (
	"context"
	"time"
)

const deleteDepartmentByID = `-- name: DeleteDepartmentByID :exec
DELETE FROM departments WHERE id = $1
`

func (q *Queries) DeleteDepartmentByID(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteDepartmentByID, id)
	return err
}

const getDepartmentByFields = `-- name: GetDepartmentByFields :one
SELECT id, name, acronym, created_at, updated_at FROM departments WHERE name = $1 AND acronym = $2
`

type GetDepartmentByFieldsParams struct {
	Name    string
	Acronym string
}

func (q *Queries) GetDepartmentByFields(ctx context.Context, arg GetDepartmentByFieldsParams) (Department, error) {
	row := q.db.QueryRowContext(ctx, getDepartmentByFields, arg.Name, arg.Acronym)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Acronym,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDepartmentByID = `-- name: GetDepartmentByID :one
SELECT id, name, acronym, created_at, updated_at FROM departments WHERE id = $1
`

func (q *Queries) GetDepartmentByID(ctx context.Context, id string) (Department, error) {
	row := q.db.QueryRowContext(ctx, getDepartmentByID, id)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Acronym,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDepartments = `-- name: GetDepartments :many
SELECT id, name, acronym, created_at, updated_at FROM departments ORDER BY created_at
`

func (q *Queries) GetDepartments(ctx context.Context) ([]Department, error) {
	rows, err := q.db.QueryContext(ctx, getDepartments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Acronym,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDepartment = `-- name: InsertDepartment :one
INSERT INTO departments (id, name, acronym, created_at, updated_at) VALUES ($1, $2, $3, $4, $5) RETURNING id, name, acronym, created_at, updated_at
`

type InsertDepartmentParams struct {
	ID        string
	Name      string
	Acronym   string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) InsertDepartment(ctx context.Context, arg InsertDepartmentParams) (Department, error) {
	row := q.db.QueryRowContext(ctx, insertDepartment,
		arg.ID,
		arg.Name,
		arg.Acronym,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Acronym,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
