// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: people.sql

package db

import (
	"context"
	"time"
)

const deletePersonByID = `-- name: DeletePersonByID :exec
DELETE FROM people WHERE id = $1
`

func (q *Queries) DeletePersonByID(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePersonByID, id)
	return err
}

const getPeople = `-- name: GetPeople :many
SELECT id, name, cpf, birth, created_at, updated_at FROM people ORDER BY created_at
`

func (q *Queries) GetPeople(ctx context.Context) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, getPeople)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cpf,
			&i.Birth,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPersonByID = `-- name: GetPersonByID :one
SELECT id, name, cpf, birth, created_at, updated_at FROM people WHERE id = $1
`

func (q *Queries) GetPersonByID(ctx context.Context, id string) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPersonByID, id)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cpf,
		&i.Birth,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertPerson = `-- name: InsertPerson :exec
INSERT INTO people (id, name, cpf, birth, created_at, updated_at) VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertPersonParams struct {
	ID        string
	Name      string
	Cpf       string
	Birth     time.Time
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) InsertPerson(ctx context.Context, arg InsertPersonParams) error {
	_, err := q.db.ExecContext(ctx, insertPerson,
		arg.ID,
		arg.Name,
		arg.Cpf,
		arg.Birth,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const updatePerson = `-- name: UpdatePerson :exec
UPDATE people SET name = $2, cpf = $3, birth = $4, updated_at = $5 WHERE id = $1
`

type UpdatePersonParams struct {
	ID        string
	Name      string
	Cpf       string
	Birth     time.Time
	UpdatedAt time.Time
}

func (q *Queries) UpdatePerson(ctx context.Context, arg UpdatePersonParams) error {
	_, err := q.db.ExecContext(ctx, updatePerson,
		arg.ID,
		arg.Name,
		arg.Cpf,
		arg.Birth,
		arg.UpdatedAt,
	)
	return err
}
