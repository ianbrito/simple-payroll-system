// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: bonds.sql

package db

import (
	"context"
	"time"
)

const deleteBondByID = `-- name: DeleteBondByID :exec
DELETE FROM bonds WHERE id = $1
`

func (q *Queries) DeleteBondByID(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteBondByID, id)
	return err
}

const getBondByID = `-- name: GetBondByID :one
SELECT id, name, created_at, updated_at FROM bonds WHERE id = $1
`

func (q *Queries) GetBondByID(ctx context.Context, id string) (Bond, error) {
	row := q.db.QueryRowContext(ctx, getBondByID, id)
	var i Bond
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBonds = `-- name: GetBonds :many
SELECT id, name, created_at, updated_at FROM bonds ORDER BY created_at
`

func (q *Queries) GetBonds(ctx context.Context) ([]Bond, error) {
	rows, err := q.db.QueryContext(ctx, getBonds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bond
	for rows.Next() {
		var i Bond
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBond = `-- name: InsertBond :one
INSERT INTO bonds (id, name, created_at, updated_at) VALUES ($1, $2, $3, $4) RETURNING id, name, created_at, updated_at
`

type InsertBondParams struct {
	ID        string
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) InsertBond(ctx context.Context, arg InsertBondParams) (Bond, error) {
	row := q.db.QueryRowContext(ctx, insertBond,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Bond
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
