// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: employees.sql

package db

import (
	"context"
	"time"
)

const deleteEmployeeByID = `-- name: DeleteEmployeeByID :exec
DELETE FROM employees WHERE id = $1
`

func (q *Queries) DeleteEmployeeByID(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteEmployeeByID, id)
	return err
}

const getEmployeeByID = `-- name: GetEmployeeByID :one
SELECT id, enrollment, person_id, created_at, updated_at FROM employees WHERE id = $1
`

func (q *Queries) GetEmployeeByID(ctx context.Context, id string) (Employee, error) {
	row := q.db.QueryRowContext(ctx, getEmployeeByID, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Enrollment,
		&i.PersonID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmployees = `-- name: GetEmployees :many
SELECT id, enrollment, person_id, created_at, updated_at FROM employees ORDER BY created_at
`

func (q *Queries) GetEmployees(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, getEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.Enrollment,
			&i.PersonID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEmployee = `-- name: InsertEmployee :exec
INSERT INTO employees (id, enrollment, person_id, created_at, updated_at) VALUES ($1, $2, $3, $4, $5)
`

type InsertEmployeeParams struct {
	ID         string
	Enrollment string
	PersonID   string
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) InsertEmployee(ctx context.Context, arg InsertEmployeeParams) error {
	_, err := q.db.ExecContext(ctx, insertEmployee,
		arg.ID,
		arg.Enrollment,
		arg.PersonID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
